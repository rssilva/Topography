//Vamos criar uma variável 'myMap' global
var myMap = null;

//pointsArray guarda o nome de cada imagem que temos. São 13 ao total
var pointsArray = ['p1.png', 'p2.png', 'p3.png', 'p4.png', 'p5.png', 'p6.png', 'p7.png', 'p8.png',
		'p9.png', 'p10.png', 'p11.png', 'p12.png', 'p13.png'];

//Quando o documento estiver pronto...
window.onload = function () {
	plotMap();
}

var plotMap = function () {
	//essa função plota o mapa no elemento de id 'main'
	//Já usamos em outros posts. Adicionamos a função 'addPoints'
	//no evento de clique. Assim saberemos qual a coordenada em que o usuário
	//clicou no mapa
	var div = document.getElementById('main'),
 	
	mapOptions = {
    	center: new google.maps.LatLng(-30.032391391218515, -51.20845556259155),
      	zoom: 14,
      	mapTypeId: google.maps.MapTypeId.ROADMAP
    };
 
	myMap = new google.maps.Map(div, mapOptions);

	google.maps.event.addListener(myMap, 'click', function(ev) {
		addPoints(ev.latLng);
	});
}

var addPoints = function (point) {

	//Essa função calcula os pontos aleatoriamente ao redor de onde o usuário clicou
	//-Temos um número de círculos concêntricos onde distribuiremos os pontos
	//-um array onde colocaremos os objetos com as coordenadas de cada ponto
	//-o incremento entre o raio de cada um desses círculos, ou seja, o espaçamento
	//entre estes
	//-o raio do círculo corrente, ou seja, aquele por qual estamos iterando
	//-quantidade de pontos que teremos em cada círculo concêntrico
	//-o incremento que teremos de ângulo entre cada ponto que estamos criando
	//-ângulo inicial de onde vamos começar a plotar os pontos em cada círculo
	//-latitude corrente, do ponto que estamos adicionando ao mapa
	//-longitude corrente, do ponto que estamos adicionando ao mapa

	var circles = 5,
		markersArray = [],
		circleRadiusIncrement = 0.002,
		currentCircleRadius = 0,
		pointsPerCircle = [5, 5, 5, 5, 5],
		currentAngleIncrement = 0,
		currentAngle = 0,
		initialAngle = 0,
		currentLatitude = 0,
		currentLongitude = 0;
	
	//vamos criar o ponto onde clicamos e adicionar ao array de marcadores

	var myLatlng = new google.maps.LatLng(point.jb, point.kb);
	markersArray.push(myLatlng);

	//vamos iterar o array que guarda a quantidade de pontos por círculo
	for (var i = 0, len = pointsPerCircle.length; i < len; i++) {
		//adicionamos o incremento dos raios concêntricos ao raio corrente
		currentCircleRadius += circleRadiusIncrement;

		//dividimos os 360º ou 2*pi radianos pela quantidade de pontos por círculo.
		//Multiplicamos um número aleatório para não termos sempre linhas retas radiais
		//para termos linhas constantes, basta setar o ângulo inicial como 0
		initialAngle = 2 * Math.PI/pointsPerCircle[i]*Math.random();
		
		//primeiro vamos adicionar o ângulo inicial que calculamos
		currentAngleIncrement = initialAngle;

		//vamos calcular o ângulo nos quais vamos espaçar os pontos em um mesmo círculo
		currentAngleIncrement += 2 * Math.PI/pointsPerCircle[i];

		for (var j = 0, len2 = pointsPerCircle[i]; j < len2; j++) {
			//em cada círculo vamos adicionar o incremento de ângulo ao ângulo corrente
			currentAngle += currentAngleIncrement;

			//latitude corrente será a latitude onde clicamos somada ao produto
			//do raio que temos multiplicado pelo cosseno do ângulo corrente

			//A longitude tem um cálculo semelhante, porém usando o seno
			currentLatitude = point.jb + (currentCircleRadius) * Math.cos(currentAngle);
			currentLongitude = point.kb + (currentCircleRadius) * Math.sin(currentAngle);

			//Depois de ter calculado longitude e latitude, criamos um objeto de coordenada
			//e adicionamo-os ao array de marcadores
			var myLatlng = new google.maps.LatLng(currentLatitude, currentLongitude);
			markersArray.push(myLatlng)
		}
	}

	//ao terminar, vamos passar o array de marcadores como parâmetro na função
	//'getInfo'
	getInfo(markersArray);
}

var getInfo = function (points) {
	//essa função tem como objetivo criar a url do serviço de onde faremos a requisição
	//que nos dará as altitudes dos pontos

	//criamos uma string 'locations'
	var locations = '';

	//iteramos por todos os pontos...
	for (var i = 0, len = points.length; i < len; i++) {
		//em cada ponto, concatenamos tudo com 'locations'
		locations += points[i].jb + ',' + points[i].kb;

		if (i !== points.length - 1) {
			//se não for o último item do array, adicionamos o caractere '|'
			//depois de cada coordenada
			locations += '|';
		}
	}

	//depois, concatenamos a string para terminar a url de onde solicitaremos o serviço
	locations += '&sensor=false';

	//criamos a url do serviço concatenando com nossas locations
	var url = 'http://maps.googleapis.com/maps/api/elevation/json?locations=' + locations;
	
	//fazemos uma requisição para o Google, usando aquela url que criamos
	$.ajax({
		type: 'GET',
		url: url,
		dataType: 'json',   
		success: function(data){
			//se for bem-sucedida, vamos chamar o método 'plotElevationPoints' passando
			//'data' como parâmetro
			plotElevationPoints(data);
		}
	});
}

var plotElevationPoints = function (data) {
	//criamos variáveis
	//-marker, que será o marcador corrente ao iterarmos
	//-step, número que guardará o intervalo de altura. Ou seja, de 0 a 5 metros, de 0 a 10 metros
	//-myLatlng é o objeto com as coordenadas
	//-index é o índice do array de imagens que temos
	
	var marker = null, 
		step = 5,
		myLatlng = null,
		index = 0;

	//iteramos sobre os resultados de 'data'
	for (var i = 0, len = data.results.length; i < len; i++) {

		//index é o valor da elevação dividido pelo step, arredondado para baixo
		//dessa forma, todos os pontos entre dois inteiros múltiplos do degrau, caem na mesma
		//faixa de valores. por exemplo, se tivermos o degrau de 5, todos os valores entre 5 e 10 
		//terão a mesma cor do array

		index = Math.floor(data.results[i].elevation/step);
		
		//criamos um objeto com a coordenada de cada ponto
		myLatlng = new google.maps.LatLng(data.results[i].location.lat, data.results[i].location.lng);

		//vamos nos previnir que não haja um ponto mais alto que o nosso 'teto'
		index = index > 12 ? 12 : index;

		//criamos um marcador onde o 'icon' é uma string onde concatenamos 'img/' com o valor do array
		//de pontos no índice específico. Assim, vamos ter algo como 'img/p2.png'
		marker = new google.maps.Marker({
	    	position: myLatlng,
	    	icon: 'img/' + pointsArray[index]
		});

		//adicionamos o marcador ao mapa.
		marker.setMap(myMap);
	}
}
